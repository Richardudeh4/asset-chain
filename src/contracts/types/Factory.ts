/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace BridgeFactoryUpgradeable {
  export type BridgeAssistInfoStruct = {
    bridgeAssist: AddressLike;
    token: AddressLike;
  };

  export type BridgeAssistInfoStructOutput = [
    bridgeAssist: string,
    token: string
  ] & { bridgeAssist: string; token: string };
}

export interface FactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "changeAdmin"
      | "implementation"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "ADD_REMOVE_LIMIT_PER_TIME"
      | "CREATOR_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MULTISIG_WALLET"
      | "addBridgeAssists"
      | "bridgeAssistImplementation"
      | "changeBridgeAssistImplementation"
      | "createBridgeAssist"
      | "getBridgeByToken"
      | "getBridgesByToken"
      | "getBridgesByTokenLength"
      | "getCreatedBridgeInfo"
      | "getCreatedBridgesInfo"
      | "getCreatedBridgesLength"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "removeBridgeAssists"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "Upgraded"
      | "BridgeAssistAdded"
      | "BridgeAssistCreated"
      | "BridgeAssistImplementationsSet"
      | "BridgeAssistRemoved"
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ADD_REMOVE_LIMIT_PER_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTISIG_WALLET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBridgeAssists",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeAssistImplementation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeBridgeAssistImplementation",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createBridgeAssist",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeByToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgesByToken",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgesByTokenLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatedBridgeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatedBridgesInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatedBridgesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBridgeAssists",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ADD_REMOVE_LIMIT_PER_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTISIG_WALLET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBridgeAssists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeAssistImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBridgeAssistImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBridgeAssist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgesByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgesByTokenLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatedBridgeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatedBridgesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatedBridgesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBridgeAssists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeAssistAddedEvent {
  export type InputTuple = [bridgeAssist: AddressLike, token: AddressLike];
  export type OutputTuple = [bridgeAssist: string, token: string];
  export interface OutputObject {
    bridgeAssist: string;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeAssistCreatedEvent {
  export type InputTuple = [bridgeAssist: AddressLike, token: AddressLike];
  export type OutputTuple = [bridgeAssist: string, token: string];
  export interface OutputObject {
    bridgeAssist: string;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeAssistImplementationsSetEvent {
  export type InputTuple = [
    bridgeTransfer: AddressLike,
    bridgeMint: AddressLike,
    bridgeNative: AddressLike,
    bridgeCircle: AddressLike
  ];
  export type OutputTuple = [
    bridgeTransfer: string,
    bridgeMint: string,
    bridgeNative: string,
    bridgeCircle: string
  ];
  export interface OutputObject {
    bridgeTransfer: string;
    bridgeMint: string;
    bridgeNative: string;
    bridgeCircle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeAssistRemovedEvent {
  export type InputTuple = [bridgeAssist: AddressLike, token: AddressLike];
  export type OutputTuple = [bridgeAssist: string, token: string];
  export interface OutputObject {
    bridgeAssist: string;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Factory extends BaseContract {
  connect(runner?: ContractRunner | null): Factory;
  waitForDeployment(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "nonpayable">;

  changeAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  implementation: TypedContractMethod<[], [string], "nonpayable">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  ADD_REMOVE_LIMIT_PER_TIME: TypedContractMethod<[], [bigint], "view">;

  CREATOR_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MULTISIG_WALLET: TypedContractMethod<[], [string], "view">;

  addBridgeAssists: TypedContractMethod<
    [bridges: AddressLike[]],
    [void],
    "nonpayable"
  >;

  bridgeAssistImplementation: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  changeBridgeAssistImplementation: TypedContractMethod<
    [
      bridgeAssistTransferImplementation_: AddressLike,
      bridgeAssistMintImplementation_: AddressLike,
      bridgeAssistNativeImplementation_: AddressLike,
      bridgeAssistCircleMintBurnImplementation_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  createBridgeAssist: TypedContractMethod<
    [
      bridgeType: BigNumberish,
      token: AddressLike,
      limitPerSend: BigNumberish,
      feeWallet: AddressLike,
      feeSend: BigNumberish,
      feeFulfill: BigNumberish,
      owner: AddressLike,
      relayers: AddressLike[],
      relayerConsensusThreshold: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getBridgeByToken: TypedContractMethod<
    [token: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;

  getBridgesByToken: TypedContractMethod<
    [token: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [string[]],
    "view"
  >;

  getBridgesByTokenLength: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getCreatedBridgeInfo: TypedContractMethod<
    [index: BigNumberish],
    [BridgeFactoryUpgradeable.BridgeAssistInfoStructOutput],
    "view"
  >;

  getCreatedBridgesInfo: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [BridgeFactoryUpgradeable.BridgeAssistInfoStructOutput[]],
    "view"
  >;

  getCreatedBridgesLength: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      bridgeAssistTransferImplementation_: AddressLike,
      bridgeAssistMintImplementation_: AddressLike,
      bridgeAssistNativeImplementation_: AddressLike,
      bridgeAssistCircleMintBurnImplementation_: AddressLike,
      multisigWalletAddress_: AddressLike,
      owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  removeBridgeAssists: TypedContractMethod<
    [bridges: AddressLike[]],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "changeAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "ADD_REMOVE_LIMIT_PER_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CREATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MULTISIG_WALLET"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addBridgeAssists"
  ): TypedContractMethod<[bridges: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "bridgeAssistImplementation"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "changeBridgeAssistImplementation"
  ): TypedContractMethod<
    [
      bridgeAssistTransferImplementation_: AddressLike,
      bridgeAssistMintImplementation_: AddressLike,
      bridgeAssistNativeImplementation_: AddressLike,
      bridgeAssistCircleMintBurnImplementation_: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createBridgeAssist"
  ): TypedContractMethod<
    [
      bridgeType: BigNumberish,
      token: AddressLike,
      limitPerSend: BigNumberish,
      feeWallet: AddressLike,
      feeSend: BigNumberish,
      feeFulfill: BigNumberish,
      owner: AddressLike,
      relayers: AddressLike[],
      relayerConsensusThreshold: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBridgeByToken"
  ): TypedContractMethod<
    [token: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBridgesByToken"
  ): TypedContractMethod<
    [token: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBridgesByTokenLength"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCreatedBridgeInfo"
  ): TypedContractMethod<
    [index: BigNumberish],
    [BridgeFactoryUpgradeable.BridgeAssistInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreatedBridgesInfo"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [BridgeFactoryUpgradeable.BridgeAssistInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreatedBridgesLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      bridgeAssistTransferImplementation_: AddressLike,
      bridgeAssistMintImplementation_: AddressLike,
      bridgeAssistNativeImplementation_: AddressLike,
      bridgeAssistCircleMintBurnImplementation_: AddressLike,
      multisigWalletAddress_: AddressLike,
      owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeBridgeAssists"
  ): TypedContractMethod<[bridges: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeAssistAdded"
  ): TypedContractEvent<
    BridgeAssistAddedEvent.InputTuple,
    BridgeAssistAddedEvent.OutputTuple,
    BridgeAssistAddedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeAssistCreated"
  ): TypedContractEvent<
    BridgeAssistCreatedEvent.InputTuple,
    BridgeAssistCreatedEvent.OutputTuple,
    BridgeAssistCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeAssistImplementationsSet"
  ): TypedContractEvent<
    BridgeAssistImplementationsSetEvent.InputTuple,
    BridgeAssistImplementationsSetEvent.OutputTuple,
    BridgeAssistImplementationsSetEvent.OutputObject
  >;
  getEvent(
    key: "BridgeAssistRemoved"
  ): TypedContractEvent<
    BridgeAssistRemovedEvent.InputTuple,
    BridgeAssistRemovedEvent.OutputTuple,
    BridgeAssistRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "BridgeAssistAdded(address,address)": TypedContractEvent<
      BridgeAssistAddedEvent.InputTuple,
      BridgeAssistAddedEvent.OutputTuple,
      BridgeAssistAddedEvent.OutputObject
    >;
    BridgeAssistAdded: TypedContractEvent<
      BridgeAssistAddedEvent.InputTuple,
      BridgeAssistAddedEvent.OutputTuple,
      BridgeAssistAddedEvent.OutputObject
    >;

    "BridgeAssistCreated(address,address)": TypedContractEvent<
      BridgeAssistCreatedEvent.InputTuple,
      BridgeAssistCreatedEvent.OutputTuple,
      BridgeAssistCreatedEvent.OutputObject
    >;
    BridgeAssistCreated: TypedContractEvent<
      BridgeAssistCreatedEvent.InputTuple,
      BridgeAssistCreatedEvent.OutputTuple,
      BridgeAssistCreatedEvent.OutputObject
    >;

    "BridgeAssistImplementationsSet(address,address,address,address)": TypedContractEvent<
      BridgeAssistImplementationsSetEvent.InputTuple,
      BridgeAssistImplementationsSetEvent.OutputTuple,
      BridgeAssistImplementationsSetEvent.OutputObject
    >;
    BridgeAssistImplementationsSet: TypedContractEvent<
      BridgeAssistImplementationsSetEvent.InputTuple,
      BridgeAssistImplementationsSetEvent.OutputTuple,
      BridgeAssistImplementationsSetEvent.OutputObject
    >;

    "BridgeAssistRemoved(address,address)": TypedContractEvent<
      BridgeAssistRemovedEvent.InputTuple,
      BridgeAssistRemovedEvent.OutputTuple,
      BridgeAssistRemovedEvent.OutputObject
    >;
    BridgeAssistRemoved: TypedContractEvent<
      BridgeAssistRemovedEvent.InputTuple,
      BridgeAssistRemovedEvent.OutputTuple,
      BridgeAssistRemovedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
