/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace BridgeAssistGenericUpgradeable {
  export type FulfillTxStruct = {
    amount: BigNumberish;
    fromUser: string;
    toUser: AddressLike;
    fromChain: string;
    nonce: BigNumberish;
  };

  export type FulfillTxStructOutput = [
    amount: bigint,
    fromUser: string,
    toUser: string,
    fromChain: string,
    nonce: bigint
  ] & {
    amount: bigint;
    fromUser: string;
    toUser: string;
    fromChain: string;
    nonce: bigint;
  };

  export type TransactionStruct = {
    amount: BigNumberish;
    timestamp: BigNumberish;
    fromUser: AddressLike;
    toUser: string;
    fromChain: string;
    toChain: string;
    nonce: BigNumberish;
    block: BigNumberish;
  };

  export type TransactionStructOutput = [
    amount: bigint,
    timestamp: bigint,
    fromUser: string,
    toUser: string,
    fromChain: string,
    toChain: string,
    nonce: bigint,
    block: bigint
  ] & {
    amount: bigint;
    timestamp: bigint;
    fromUser: string;
    toUser: string;
    fromChain: string;
    toChain: string;
    nonce: bigint;
    block: bigint;
  };
}

export interface BridgeAssistInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CURRENT_CHAIN"
      | "CURRENT_CHAIN_B32"
      | "DEFAULT_ADMIN_ROLE"
      | "FEE_DENOMINATOR"
      | "FULFILL_TX_TYPEHASH"
      | "MANAGER_ROLE"
      | "MAX_RELAYERS"
      | "TOKEN"
      | "addChains"
      | "eip712Domain"
      | "exchangeRateFrom"
      | "feeFulfill"
      | "feeSend"
      | "feeWallet"
      | "fulfill"
      | "fulfilledAt"
      | "getRelayers"
      | "getRoleAdmin"
      | "getUserTransactions"
      | "getUserTransactionsAmount"
      | "getUserTransactionsSlice"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isSupportedChain"
      | "limitPerSend"
      | "nonce"
      | "pause"
      | "paused"
      | "relayerConsensusThreshold"
      | "relayers"
      | "relayersLength"
      | "removeChains"
      | "renounceRole"
      | "revokeRole"
      | "send"
      | "setFee"
      | "setFeeWallet"
      | "setLimitPerSend"
      | "setRelayers"
      | "supportedChainList"
      | "supportsInterface"
      | "transactions"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChainAdded"
      | "ChainRemoved"
      | "EIP712DomainChanged"
      | "FeeSet"
      | "FeeWalletSet"
      | "FulfilledTokens"
      | "Initialized"
      | "LimitPerSendSet"
      | "Paused"
      | "RelayerConsensusThresholdSet"
      | "RelayerSet"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SentTokens"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CURRENT_CHAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURRENT_CHAIN_B32",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FULFILL_TX_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_RELAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addChains",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateFrom",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeFulfill",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeSend", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [BridgeAssistGenericUpgradeable.FulfillTxStruct, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfilledAt",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTransactions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTransactionsAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTransactionsSlice",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedChain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "limitPerSend",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relayerConsensusThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relayersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeChains",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitPerSend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayers",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedChainList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CURRENT_CHAIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURRENT_CHAIN_B32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FULFILL_TX_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_RELAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addChains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeFulfill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeSend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfilledAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTransactionsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTransactionsSlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitPerSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayerConsensusThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitPerSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedChainList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace ChainAddedEvent {
  export type InputTuple = [chain: string, exchangeRate: BigNumberish];
  export type OutputTuple = [chain: string, exchangeRate: bigint];
  export interface OutputObject {
    chain: string;
    exchangeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainRemovedEvent {
  export type InputTuple = [chain: string];
  export type OutputTuple = [chain: string];
  export interface OutputObject {
    chain: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeSetEvent {
  export type InputTuple = [feeSend: BigNumberish, feeFulfill: BigNumberish];
  export type OutputTuple = [feeSend: bigint, feeFulfill: bigint];
  export interface OutputObject {
    feeSend: bigint;
    feeFulfill: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeWalletSetEvent {
  export type InputTuple = [feeWallet: AddressLike];
  export type OutputTuple = [feeWallet: string];
  export interface OutputObject {
    feeWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FulfilledTokensEvent {
  export type InputTuple = [
    fromUser: string,
    toUser: AddressLike,
    fromChain: string,
    toChain: string,
    amount: BigNumberish,
    exchangeRate: BigNumberish
  ];
  export type OutputTuple = [
    fromUser: string,
    toUser: string,
    fromChain: string,
    toChain: string,
    amount: bigint,
    exchangeRate: bigint
  ];
  export interface OutputObject {
    fromUser: string;
    toUser: string;
    fromChain: string;
    toChain: string;
    amount: bigint;
    exchangeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LimitPerSendSetEvent {
  export type InputTuple = [limitPerSend: BigNumberish];
  export type OutputTuple = [limitPerSend: bigint];
  export interface OutputObject {
    limitPerSend: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerConsensusThresholdSetEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerSetEvent {
  export type InputTuple = [relayer: AddressLike];
  export type OutputTuple = [relayer: string];
  export interface OutputObject {
    relayer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SentTokensEvent {
  export type InputTuple = [
    fromUser: AddressLike,
    toUser: string,
    fromChain: string,
    toChain: string,
    amount: BigNumberish,
    exchangeRate: BigNumberish
  ];
  export type OutputTuple = [
    fromUser: string,
    toUser: string,
    fromChain: string,
    toChain: string,
    amount: bigint,
    exchangeRate: bigint
  ];
  export interface OutputObject {
    fromUser: string;
    toUser: string;
    fromChain: string;
    toChain: string;
    amount: bigint;
    exchangeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BridgeAssist extends BaseContract {
  connect(runner?: ContractRunner | null): BridgeAssist;
  waitForDeployment(): Promise<this>;

  interface: BridgeAssistInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CURRENT_CHAIN: TypedContractMethod<[], [string], "view">;

  CURRENT_CHAIN_B32: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  FULFILL_TX_TYPEHASH: TypedContractMethod<[], [string], "view">;

  MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_RELAYERS: TypedContractMethod<[], [bigint], "view">;

  TOKEN: TypedContractMethod<[], [string], "view">;

  addChains: TypedContractMethod<
    [chains: string[], exchangeRatesFromPow: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  exchangeRateFrom: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  feeFulfill: TypedContractMethod<[], [bigint], "view">;

  feeSend: TypedContractMethod<[], [bigint], "view">;

  feeWallet: TypedContractMethod<[], [string], "view">;

  fulfill: TypedContractMethod<
    [
      transaction: BridgeAssistGenericUpgradeable.FulfillTxStruct,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  fulfilledAt: TypedContractMethod<
    [arg0: string, arg1: string, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  getRelayers: TypedContractMethod<[], [string[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserTransactions: TypedContractMethod<
    [user: AddressLike],
    [BridgeAssistGenericUpgradeable.TransactionStructOutput[]],
    "view"
  >;

  getUserTransactionsAmount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserTransactionsSlice: TypedContractMethod<
    [user_: AddressLike, offset_: BigNumberish, limit_: BigNumberish],
    [BridgeAssistGenericUpgradeable.TransactionStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      token_: AddressLike,
      limitPerSend_: BigNumberish,
      feeWallet_: AddressLike,
      feeSend_: BigNumberish,
      feeFulfill_: BigNumberish,
      owner: AddressLike,
      relayers_: AddressLike[],
      relayerConsensusThreshold_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isSupportedChain: TypedContractMethod<[chain: string], [boolean], "view">;

  limitPerSend: TypedContractMethod<[], [bigint], "view">;

  nonce: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  relayerConsensusThreshold: TypedContractMethod<[], [bigint], "view">;

  relayers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  relayersLength: TypedContractMethod<[], [bigint], "view">;

  removeChains: TypedContractMethod<[chains: string[]], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  send: TypedContractMethod<
    [amount: BigNumberish, toUser: string, toChain: string],
    [void],
    "payable"
  >;

  setFee: TypedContractMethod<
    [feeSend_: BigNumberish, feeFulfill_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeWallet: TypedContractMethod<
    [feeWallet_: AddressLike],
    [void],
    "nonpayable"
  >;

  setLimitPerSend: TypedContractMethod<
    [limitPerSend_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRelayers: TypedContractMethod<
    [relayers_: AddressLike[], relayerConsensusThreshold_: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportedChainList: TypedContractMethod<[], [string[]], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transactions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, string, string, string, string, bigint, bigint] & {
        amount: bigint;
        timestamp: bigint;
        fromUser: string;
        toUser: string;
        fromChain: string;
        toChain: string;
        nonce: bigint;
        block: bigint;
      }
    ],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CURRENT_CHAIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURRENT_CHAIN_B32"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FULFILL_TX_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_RELAYERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addChains"
  ): TypedContractMethod<
    [chains: string[], exchangeRatesFromPow: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "exchangeRateFrom"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeFulfill"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeSend"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fulfill"
  ): TypedContractMethod<
    [
      transaction: BridgeAssistGenericUpgradeable.FulfillTxStruct,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fulfilledAt"
  ): TypedContractMethod<
    [arg0: string, arg1: string, arg2: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRelayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserTransactions"
  ): TypedContractMethod<
    [user: AddressLike],
    [BridgeAssistGenericUpgradeable.TransactionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTransactionsAmount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTransactionsSlice"
  ): TypedContractMethod<
    [user_: AddressLike, offset_: BigNumberish, limit_: BigNumberish],
    [BridgeAssistGenericUpgradeable.TransactionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      token_: AddressLike,
      limitPerSend_: BigNumberish,
      feeWallet_: AddressLike,
      feeSend_: BigNumberish,
      feeFulfill_: BigNumberish,
      owner: AddressLike,
      relayers_: AddressLike[],
      relayerConsensusThreshold_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isSupportedChain"
  ): TypedContractMethod<[chain: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "limitPerSend"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "relayerConsensusThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "relayers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "relayersLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeChains"
  ): TypedContractMethod<[chains: string[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [amount: BigNumberish, toUser: string, toChain: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<
    [feeSend_: BigNumberish, feeFulfill_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeWallet"
  ): TypedContractMethod<[feeWallet_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLimitPerSend"
  ): TypedContractMethod<[limitPerSend_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRelayers"
  ): TypedContractMethod<
    [relayers_: AddressLike[], relayerConsensusThreshold_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedChainList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, string, string, string, string, bigint, bigint] & {
        amount: bigint;
        timestamp: bigint;
        fromUser: string;
        toUser: string;
        fromChain: string;
        toChain: string;
        nonce: bigint;
        block: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ChainAdded"
  ): TypedContractEvent<
    ChainAddedEvent.InputTuple,
    ChainAddedEvent.OutputTuple,
    ChainAddedEvent.OutputObject
  >;
  getEvent(
    key: "ChainRemoved"
  ): TypedContractEvent<
    ChainRemovedEvent.InputTuple,
    ChainRemovedEvent.OutputTuple,
    ChainRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeSet"
  ): TypedContractEvent<
    FeeSetEvent.InputTuple,
    FeeSetEvent.OutputTuple,
    FeeSetEvent.OutputObject
  >;
  getEvent(
    key: "FeeWalletSet"
  ): TypedContractEvent<
    FeeWalletSetEvent.InputTuple,
    FeeWalletSetEvent.OutputTuple,
    FeeWalletSetEvent.OutputObject
  >;
  getEvent(
    key: "FulfilledTokens"
  ): TypedContractEvent<
    FulfilledTokensEvent.InputTuple,
    FulfilledTokensEvent.OutputTuple,
    FulfilledTokensEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LimitPerSendSet"
  ): TypedContractEvent<
    LimitPerSendSetEvent.InputTuple,
    LimitPerSendSetEvent.OutputTuple,
    LimitPerSendSetEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RelayerConsensusThresholdSet"
  ): TypedContractEvent<
    RelayerConsensusThresholdSetEvent.InputTuple,
    RelayerConsensusThresholdSetEvent.OutputTuple,
    RelayerConsensusThresholdSetEvent.OutputObject
  >;
  getEvent(
    key: "RelayerSet"
  ): TypedContractEvent<
    RelayerSetEvent.InputTuple,
    RelayerSetEvent.OutputTuple,
    RelayerSetEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SentTokens"
  ): TypedContractEvent<
    SentTokensEvent.InputTuple,
    SentTokensEvent.OutputTuple,
    SentTokensEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ChainAdded(string,uint256)": TypedContractEvent<
      ChainAddedEvent.InputTuple,
      ChainAddedEvent.OutputTuple,
      ChainAddedEvent.OutputObject
    >;
    ChainAdded: TypedContractEvent<
      ChainAddedEvent.InputTuple,
      ChainAddedEvent.OutputTuple,
      ChainAddedEvent.OutputObject
    >;

    "ChainRemoved(string)": TypedContractEvent<
      ChainRemovedEvent.InputTuple,
      ChainRemovedEvent.OutputTuple,
      ChainRemovedEvent.OutputObject
    >;
    ChainRemoved: TypedContractEvent<
      ChainRemovedEvent.InputTuple,
      ChainRemovedEvent.OutputTuple,
      ChainRemovedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "FeeSet(uint256,uint256)": TypedContractEvent<
      FeeSetEvent.InputTuple,
      FeeSetEvent.OutputTuple,
      FeeSetEvent.OutputObject
    >;
    FeeSet: TypedContractEvent<
      FeeSetEvent.InputTuple,
      FeeSetEvent.OutputTuple,
      FeeSetEvent.OutputObject
    >;

    "FeeWalletSet(address)": TypedContractEvent<
      FeeWalletSetEvent.InputTuple,
      FeeWalletSetEvent.OutputTuple,
      FeeWalletSetEvent.OutputObject
    >;
    FeeWalletSet: TypedContractEvent<
      FeeWalletSetEvent.InputTuple,
      FeeWalletSetEvent.OutputTuple,
      FeeWalletSetEvent.OutputObject
    >;

    "FulfilledTokens(string,address,string,string,uint256,uint256)": TypedContractEvent<
      FulfilledTokensEvent.InputTuple,
      FulfilledTokensEvent.OutputTuple,
      FulfilledTokensEvent.OutputObject
    >;
    FulfilledTokens: TypedContractEvent<
      FulfilledTokensEvent.InputTuple,
      FulfilledTokensEvent.OutputTuple,
      FulfilledTokensEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LimitPerSendSet(uint256)": TypedContractEvent<
      LimitPerSendSetEvent.InputTuple,
      LimitPerSendSetEvent.OutputTuple,
      LimitPerSendSetEvent.OutputObject
    >;
    LimitPerSendSet: TypedContractEvent<
      LimitPerSendSetEvent.InputTuple,
      LimitPerSendSetEvent.OutputTuple,
      LimitPerSendSetEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RelayerConsensusThresholdSet(uint256)": TypedContractEvent<
      RelayerConsensusThresholdSetEvent.InputTuple,
      RelayerConsensusThresholdSetEvent.OutputTuple,
      RelayerConsensusThresholdSetEvent.OutputObject
    >;
    RelayerConsensusThresholdSet: TypedContractEvent<
      RelayerConsensusThresholdSetEvent.InputTuple,
      RelayerConsensusThresholdSetEvent.OutputTuple,
      RelayerConsensusThresholdSetEvent.OutputObject
    >;

    "RelayerSet(address)": TypedContractEvent<
      RelayerSetEvent.InputTuple,
      RelayerSetEvent.OutputTuple,
      RelayerSetEvent.OutputObject
    >;
    RelayerSet: TypedContractEvent<
      RelayerSetEvent.InputTuple,
      RelayerSetEvent.OutputTuple,
      RelayerSetEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SentTokens(address,string,string,string,uint256,uint256)": TypedContractEvent<
      SentTokensEvent.InputTuple,
      SentTokensEvent.OutputTuple,
      SentTokensEvent.OutputObject
    >;
    SentTokens: TypedContractEvent<
      SentTokensEvent.InputTuple,
      SentTokensEvent.OutputTuple,
      SentTokensEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
